import pytest


@pytest.fixture
def text_for_str_tests() -> str:
    """
    –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ç–∏–ø–∞ str
    """
    return 'TestTesttesT'
    

def test_str_members(text_for_str_tests) -> None:
    """
    –û–±—ã—á–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∏–ø–∞ str
    """
    # –∑–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤
    assert text_for_str_tests.replace('Test', 'AAA') == 'AAAAAAtesT'
    # —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
    assert text_for_str_tests.split('T') == ['', 'est', 'esttes', '']
    # –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –∏ —É–º–Ω–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    assert (text_for_str_tests * 2) == (text_for_str_tests + text_for_str_tests)
    # —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
    assert text_for_str_tests.startswith('Te') and text_for_str_tests.endswith('sT')
    # –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    assert text_for_str_tests.lower() == 'testtesttest'


@pytest.mark.parametrize("input,expected", [
    ("test", 4),    # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–ª–∞—Ç–∏–Ω–∏—Ü–∞)
    ("–ø—Ä–∏–≤–µ—Ç", 6),  # –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç (–∫–∏—Ä–∏–ª–∏—Ü–∞)
    ("üëãüèº", 2),      # —Å–æ—Å—Ç–∞–≤–Ω–æ–π —é–Ω–∏–∫–æ–¥ —Å–∏–º–≤–æ–ª 
    ("", 0),        # –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
    ("\t", 1)       # —Ç–µ–∫—Å—Ç —Å —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
    ])   
def test_str_len(input: str, expected: int) -> None:
    """
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ len –¥–ª—è —Å—Ç—Ä–æ–∫
    """
    assert len(input) == expected


def test_str_expected_fail(text_for_str_tests) -> None:
    """
    –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ –æ—à–∏–±–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—ã
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
        check = text_for_str_tests[100]
    except IndexError:
        pass
    